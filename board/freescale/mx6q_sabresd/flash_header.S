/*
 * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx6.h>

#ifdef	CONFIG_FLASH_HEADER
#ifndef CONFIG_FLASH_HEADER_OFFSET
//error "Must define the offset of flash header"
#endif

#define CPU_2_BE_32(l) \
       ((((l) & 0x000000FF) << 24) | \
	(((l) & 0x0000FF00) << 8)  | \
	(((l) & 0x00FF0000) >> 8)  | \
	(((l) & 0xFF000000) >> 24))

#define MXC_DCD_ITEM(i, addr, val)   \
dcd_node_##i:                        \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val)  ;     \

.section ".text.flasheader", "x"
	b	_start
	.org	CONFIG_FLASH_HEADER_OFFSET

ivt_header:       .word 0x402000D1 /* Tag=0xD1, Len=0x0020, Ver=0x40 */
app_code_jump_v:  .word _start
reserv1:          .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header

#ifdef CONFIG_SECURE_BOOT
app_code_csf:     .word __hab_data
#else
app_code_csf:     .word 0x0
#endif

reserv2:          .word 0x0
boot_data:        .word TEXT_BASE

#ifdef CONFIG_SECURE_BOOT
image_len:        .word __hab_data_end - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#else
image_len:        .word _end_of_copy  - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#endif
plugin:           .word 0x0

// Be sure to change the hex value if DCD commands are added/deleted.
dcd_hdr:          .word 0x40B802D2 /* Tag=0xD2, Len=86*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x04B402CC /* Tag=0xCC, Len=86*8 + 4, Param=0x04 */

/* DCD */

// Debug LEDs /////////////////////////////////////////////////////////////////
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x234, 0x00000005)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x604, 0x000130B0)
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x238, 0x00000005)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x608, 0x000130B0)
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x23C, 0x00000005)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x60C, 0x000130B0)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x218, 0x00000005)
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x5E8, 0x000130B0)
MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x21C, 0x00000005)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x5EC, 0x000130B0)
///////////////////////////////////////////////////////////////////////////////

// DRAM Scrpit Aid ////////////////////////////////////////////////////////////

MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x068, 0xffffffff) //
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x06c, 0xffffffff) //
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x070, 0xffffffff) //
MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x074, 0xffffffff) //
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x078, 0xffffffff) //
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x07c, 0xffffffff) //
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x080, 0xffffffff) //
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x084, 0xffffffff) //
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x018, 0x00060324) //DDR clk to 400MHz
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x774, 0x00080000) // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x754, 0x00000000) // IOMUXC_SW_PAD_CTL_GRP_DDRPKE
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0
MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x464, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x490, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x74c, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_ADDDS
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x494, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - DSE can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1
MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x76c, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_CTLDS
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x750, 0x00020000) // IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x4bc, 0x00003030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x4c0, 0x00003030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x4c4, 0x00003030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x4c8, 0x00003030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x760, 0x00020000) // IOMUXC_SW_PAD_CTL_GRP_DDRMODE
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x764, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_B0DS
MXC_DCD_ITEM(39, IOMUXC_BASE_ADDR + 0x770, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_B1DS
MXC_DCD_ITEM(40, IOMUXC_BASE_ADDR + 0x778, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_B2DS
MXC_DCD_ITEM(41, IOMUXC_BASE_ADDR + 0x77c, 0x00000030) // IOMUXC_SW_PAD_CTL_GRP_B3DS
MXC_DCD_ITEM(42, IOMUXC_BASE_ADDR + 0x470, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0
MXC_DCD_ITEM(43, IOMUXC_BASE_ADDR + 0x474, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1
MXC_DCD_ITEM(44, IOMUXC_BASE_ADDR + 0x478, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2
MXC_DCD_ITEM(45, IOMUXC_BASE_ADDR + 0x47c, 0x00000030) // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3
MXC_DCD_ITEM(46, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000) // MMDC0_MDSCR, set the Configuration request bit during MMDC set up
MXC_DCD_ITEM(47, MMDC_P0_BASE_ADDR + 0x85c, 0x1B4700C7) //MMDC0_MPZQLP2CTL,LPDDR2 ZQ params
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003) // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.
MXC_DCD_ITEM(49, MMDC_P0_BASE_ADDR + 0x890, 0x00400000) // values of 20,40,50,60,7f tried. no difference seen	Original Values (Delete Later)	Difference?
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x848, 0x464A4C4C) // MPRDDLCTL PHY0
MXC_DCD_ITEM(51, MMDC_P0_BASE_ADDR + 0x850, 0x38363434) // MPWRDLCTL PHY0
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x83c, 0x20000000) //
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x840, 0x00000000) //
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P0_MPREDQBY0DL3	Original Values (Delete Later)	Difference?
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P0_MPREDQBY1DL3	0x00009c40	0x33333333
MXC_DCD_ITEM(56, MMDC_P0_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P0_MPREDQBY2DL3	0x00000000	0x33333333
MXC_DCD_ITEM(57, MMDC_P0_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P0_MPREDQBY3DL3	0x00000000	0x33333333
MXC_DCD_ITEM(58, MMDC_P0_BASE_ADDR + 0x82c, 0xF3333333) // DDR_PHY_P0_MPREDQBY0DL3	Original Values (Delete Later)	Difference?
MXC_DCD_ITEM(59, MMDC_P0_BASE_ADDR + 0x830, 0xF3333333) // DDR_PHY_P0_MPREDQBY1DL3	0x00009c40	0xF3333333
MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x834, 0xF3333333) // DDR_PHY_P0_MPREDQBY2DL3	0x00000000	0xF3333333
MXC_DCD_ITEM(61, MMDC_P0_BASE_ADDR + 0x838, 0xF3333333) // DDR_PHY_P0_MPREDQBY3DL3	0x00000000	0xF3333333
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x004, 0x00020036) // MMDC0_MDPDC
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x008, 0x00000000) // MMDC0_MDOTC
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x00c, 0x33374133) // MMDC0_MDCFG0
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x010, 0x00100A82) // MMDC0_MDCFG1
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x014, 0x00000093) // MMDC0_MDCFG2
MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x018, 0x00001688) // MMDC0_MDMISC	0x015dc002	0x00001748
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000) // MMDC0_MDSCR, set the Configuration request bit during MMDC set up
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x02c, 0x0F9F26D2) // MMDC0_MDRWD
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x030, 0x00000010) // MMDC0_MDOR
MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x038, 0x00190778) // MMDC0_MDCFG3LP
MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x040, 0x00000017) // Chan0 CS0_END
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x400, 0x11420000) // MMDC0_MAARCR ADOPT optimized priorities. Dyn jump disabled
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x000, 0x83110000) // MMDC0_MDCTL
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x003F8030) // MRW: BA=0 CS=0 MR_ADDR=63 MR_OP=0
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0xFF0A8030) // MRW: BA=0 CS=0 MR_ADDR=10 MR_OP=ff
MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x01c, 0x82018030) // MRW: BA=0 CS=0 MR_ADDR=1  MR_OP=c2
MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x01c, 0x04028030) // MRW: BA=0 CS=0 MR_ADDR=2  MR_OP=6. tcl=8, tcwl=4
MXC_DCD_ITEM(80, MMDC_P0_BASE_ADDR + 0x01c, 0x02038030) // MRW: BA=0 CS=0 MR_ADDR=3  MR_OP=2.drive=240/6
MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003) // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x020, 0x00001800) // MMDC0_MDREF
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x818, 0x00000000) // DDR_PHY_P0_MPODTCTRL
MXC_DCD_ITEM(84, MMDC_P0_BASE_ADDR + 0x004, 0x00025576) // MMDC0_MDPDC now SDCTL power down enabled
MXC_DCD_ITEM(85, MMDC_P0_BASE_ADDR + 0x404, 0x00011006) // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.
MXC_DCD_ITEM(86, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)	0x01000202	0x00000000

///////////////////////////////////////////////////////////////////////////////


#endif
